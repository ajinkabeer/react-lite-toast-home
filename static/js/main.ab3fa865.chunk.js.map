{"version":3,"sources":["App.js","serviceWorker.js","index.js","assets/github.svg","assets/npm.svg"],"names":["App","useState","toast","setToast","toastType","setToastType","position","setPosition","title","setTitle","message","setMessage","toastHandler","type","className","aria-label","role","href","target","src","github","alt","npm","class","onClick","description","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"yQAwCeA,MAjCf,WAAgB,IAAD,EACaC,oBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAIaN,mBAAS,IAJtB,mBAINO,EAJM,KAICC,EAJD,OAKiBR,mBAAS,IAL1B,mBAKNS,EALM,KAKGC,EALH,KAOPC,EAAe,SAACC,EAAMP,EAAUE,EAAOE,GAC3CL,EAAaQ,GACbN,EAAYD,GACZG,EAASD,GACTG,EAAWD,GACXP,GAAUD,IAGZ,OACE,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAChB,gDAAqB,0BAAMC,aAAW,YAAYC,KAAK,OAAlC,WACrB,uBAAGC,KAAK,qDAAqDC,OAAO,UAAS,yBAAKJ,UAAU,WAAWK,IAAKC,IAAQC,IAAI,YAExH,uBAAGJ,KAAK,iDAAiDC,OAAO,UAAS,yBAAKJ,UAAU,WAAWK,IAAKG,IAAKD,IAAI,SACjH,gGACA,4BAAQE,MAAM,cAAcC,QAAS,kBAAMZ,EAAa,UAAW,WAAY,UAAW,oBAA1F,WACA,4BAAQW,MAAM,YAAYC,QAAS,kBAAMZ,EAAa,QAAS,UAAW,SAAU,0BAApF,SACA,4BAAQW,MAAM,cAAcC,QAAS,kBAAMZ,EAAa,UAAW,cAAe,UAAW,aAA7F,WACA,4BAAQW,MAAM,WAAWC,QAAS,kBAAMZ,EAAa,OAAQ,aAAc,OAAQ,iBAAnF,QACCV,GAAS,kBAAC,IAAD,CAAOW,KAAMT,EAAWI,MAAOA,EAAOiB,YAAaf,EAASJ,SAAUA,OCtBpEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjC,a,kBEzI5BmC,EAAOC,QAAU,IAA0B,oC,kBCA3CD,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.ab3fa865.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Toast } from 'react-lite-toast'\nimport github from './assets/github.svg'\nimport npm from './assets/npm.svg'\n\nimport 'react-lite-toast/dist/index.css'\n\nfunction App() {\n  const [toast, setToast] = useState(false)\n  const [toastType, setToastType] = useState('')\n  const [position, setPosition] = useState('')\n  const [title, setTitle] = useState('')\n  const [message, setMessage] = useState('')\n\n  const toastHandler = (type, position, title, message) => {\n    setToastType(type)\n    setPosition(position)\n    setTitle(title)\n    setMessage(message)\n    setToast(!toast)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React-lite-toast <span aria-label=\"zap emoji\" role=\"img\">âš¡</span></h1>\n        <a href=\"https://www.github.com/ajinkabeer/react-lite-toast\" target=\"_blank\"><img className=\"logo-img\" src={github} alt=\"github\" /></a>\n\n        <a href=\"https://www.npmjs.com/package/react-lite-toast\" target=\"_blank\"><img className=\"logo-img\" src={npm} alt=\"npm\" /></a>\n        <p>A minimal toast notification for react with bundled size of 3 kB.</p>\n        <button class=\"btn success\" onClick={() => toastHandler('success', 'bottomup', 'Success', 'Dunder Mifflin')}>success</button>\n        <button class=\"btn error\" onClick={() => toastHandler('error', 'topdown', 'Failed', 'Battlestart Galatica')}>error</button>\n        <button class=\"btn warning\" onClick={() => toastHandler('warning', 'bottomright', 'Warning', 'Wooooof')} >warning</button>\n        <button class=\"btn info\" onClick={() => toastHandler('info', 'bottomleft', 'Info', 'Please note')}>info</button>\n        {toast && <Toast type={toastType} title={title} description={message} position={position} />}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/github.c517f7a2.svg\";","module.exports = __webpack_public_path__ + \"static/media/npm.a363d0b9.svg\";"],"sourceRoot":""}